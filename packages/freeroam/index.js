// const markerPos = { x: -263.631591796875, y: 2195.6708984375, z: 128.47988891601562}
// mp.events.add('playerReady', (player) => {
//     player.call('playerInitLogistWork', [markerPos]);
// })

/* ==========================================================
 *  –°–ò–°–¢–ï–ú–ê –ú–Ø–ß–ï–ô - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * ========================================================== */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º—è—á–µ–π
let balls = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –º—è—á–µ–π: { ballId: { ownerId, position, colshapeId } }
let playerBalls = new Map(); // –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤: { playerId: { inventory, count } }

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –º—è—á–µ–π –ø—Ä–∏ –∑–∞–∫–∞–∑–∞—Ö
const ORDER_SPAWN_POSITIONS = [
    { x: -1065, y: -3425, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ê" },
    { x: -1070, y: -3430, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ë" },
    { x: -1060, y: -3420, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –í" },
    { x: -1075, y: -3435, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ì" },
    { x: -1055, y: -3415, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –î" },
    { x: -1080, y: -3440, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ï" },
    { x: -1050, y: -3410, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ñ" },
    { x: -1085, y: -3445, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ó" },
    { x: -1045, y: -3405, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ò" },
    { x: -1090, y: -3450, z: 15, name: "–ü–æ–∑–∏—Ü–∏—è –ö" }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
mp.events.add('playerJoin', (player) => {
    playerBalls.set(player.id, {
        inventory: 5,
        count: 0 // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º—è—á–µ–π
    });
    console.log(`[BALL SYSTEM] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player.name} (ID: ${player.id})`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
    player.call('updateInventory', [5, 0]);
});

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
mp.events.add('playerQuit', (player) => {
    playerBalls.delete(player.id);
    console.log(`[BALL SYSTEM] –£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${player.name} (ID: ${player.id})`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—è—á–∞
mp.events.add('spawnObjectNearby', (player, checkLimit = true, customPos = null) => {
    const playerData = playerBalls.get(player.id);
    if (!playerData) {
        console.log(`[BALL SYSTEM] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player.name} (ID: ${player.id})`);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ checkLimit = true)
    if (checkLimit && playerData.inventory <= 0) {
        player.outputChatBox('–£ –≤–∞—Å –Ω–µ—Ç –º—è—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è!');
        return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø–∞–≤–Ω–∞
    let spawnPos;
    if (customPos && Array.isArray(customPos)) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [x, y, z]
        spawnPos = new mp.Vector3(
            parseFloat(customPos[0]),
            parseFloat(customPos[1]),
            parseFloat(customPos[2])
        );

        // –ê–Ω—Ç–∏—á–∏—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
        const distance = Math.sqrt(
            Math.pow(spawnPos.x - player.position.x, 2) +
            Math.pow(spawnPos.y - player.position.y, 2) +
            Math.pow(spawnPos.z - player.position.z, 2)
        );

        if (distance > 1000.0) {
            player.outputChatBox('–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–ª–∏!');
            return;
        }
    } else {
        // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–æ–∑–ª–µ –∏–≥—Ä–æ–∫–∞
        const playerPos = player.position;
        spawnPos = new mp.Vector3(
            playerPos.x + 3,
            playerPos.y,
            playerPos.z
        );
    }

    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        const ball = mp.objects.new(
            mp.joaat('prop_mp_drug_pack_blue'),
            spawnPos,
            { alpha: 255, dimension: player.dimension }
        );

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        const colshape = mp.colshapes.newSphere(spawnPos.x, spawnPos.y, spawnPos.z, 2.5, player.dimension);
        colshape.ballId = ball.id;
        colshape.ballObject = ball;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—è—á–µ
        balls.set(ball.id, {
            ownerId: player.id,
            position: spawnPos,
            colshapeId: colshape.id
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç)
        if (checkLimit) {
            playerData.inventory--;
            playerBalls.set(player.id, playerData);
            player.call('updateInventory', [playerData.inventory, playerData.count]);
        }

        player.outputChatBox(`–ú—è—á —Å–æ–∑–¥–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏: ${spawnPos.x.toFixed(1)}, ${spawnPos.y.toFixed(1)}, ${spawnPos.z.toFixed(1)}`);
        console.log(`[BALL SYSTEM] –ú—è—á —Å–æ–∑–¥–∞–Ω –∏–≥—Ä–æ–∫–æ–º ${player.name} (ID: ${ball.id}) –≤ –ø–æ–∑–∏—Ü–∏–∏ ${spawnPos.x}, ${spawnPos.y}, ${spawnPos.z}`);

    } catch (error) {
        console.error(`[BALL SYSTEM] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—è—á–∞:`, error);
        player.outputChatBox('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—è—á–∞!');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞/—Ç–µ–ª–µ—Ñ–æ–Ω–∞)
mp.events.add('spawnBallAtPosition', (player, x, y, z) => {
    console.log(`[BALL SYSTEM] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∞–≤–Ω –º—è—á–∞ –æ—Ç ${player.name} –≤ –ø–æ–∑–∏—Ü–∏–∏: ${x}, ${y}, ${z}`);
    const customPos = [x, y, z];
    mp.events.call('spawnObjectNearby', player, false, customPos);
});

// –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–ø–∞–≤–Ω–∞ –º—è—á–µ–π –ø—Ä–∏ –∑–∞–∫–∞–∑–µ
mp.events.add('spawnOrderBalls', (player, quantity = 5) => {
    console.log(`[ORDER SYSTEM] –ò–≥—Ä–æ–∫ ${player.name} –∑–∞–∫–∞–∑–∞–ª ${quantity} –º—è—á–µ–π`);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—è—á–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const maxBalls = Math.min(quantity, ORDER_SPAWN_POSITIONS.length);

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    const shuffledPositions = [...ORDER_SPAWN_POSITIONS].sort(() => Math.random() - 0.5);

    // –°–ø–∞–≤–Ω–∏–º –º—è—á–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < maxBalls; i++) {
        setTimeout(() => {
            const position = shuffledPositions[i];
            const customPos = [position.x, position.y, position.z];

            // –°–ø–∞–≤–Ω–∏–º –º—è—á –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            mp.events.call('spawnObjectNearby', player, false, customPos);

            console.log(`[ORDER SYSTEM] –ú—è—á ${i + 1}/${maxBalls} —Å–æ–∑–¥–∞–Ω –≤ ${position.name} (${position.x}, ${position.y}, ${position.z})`);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            if (i === 0) {
                player.outputChatBox(`üéæ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–æ–∑–¥–∞–µ–º ${maxBalls} –º—è—á–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö...`);
            }
            if (i === maxBalls - 1) {
                player.outputChatBox(`‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –í—Å–µ ${maxBalls} –º—è—á–µ–π —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ.`);
            }

        }, i * 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ 300–º—Å –º–µ–∂–¥—É —Å–ø–∞–≤–Ω–∞–º–∏
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(`[ORDER SYSTEM] –ó–∞–∫–∞–∑ –∏–≥—Ä–æ–∫–∞ ${player.name} –Ω–∞ ${maxBalls} –º—è—á–µ–π –∑–∞–ø—É—â–µ–Ω`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –º—è—á–∞
mp.events.add('collectBall', (player, ballId) => {
    const ballInfo = balls.get(ballId);
    if (!ballInfo) {
        console.log(`[BALL SYSTEM] –ú—è—á —Å ID ${ballId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –º—è—á–∞
    const ball = mp.objects.at(ballId);
    if (ball) {
        ball.destroy();
        console.log(`[BALL SYSTEM] –ú—è—á —Å ID ${ballId} —É–Ω–∏—á—Ç–æ–∂–µ–Ω`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –°–û–ë–ò–†–ê–Æ–©–ï–ì–û –∏–≥—Ä–æ–∫–∞ (–Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º—è—á–∞)
    let playerData = playerBalls.get(player.id);
    if (playerData) {
        playerData.inventory++;
        playerData.count++;
        playerBalls.set(player.id, playerData);
        player.call('updateInventory', [playerData.inventory, playerData.count]);
        player.outputChatBox(`–ú—è—á —Å–æ–±—Ä–∞–Ω! –í—Å–µ–≥–æ –º—è—á–µ–π: ${playerData.inventory} | –°–æ–±—Ä–∞–Ω–æ: ${playerData.count}`);
        console.log(`[BALL SYSTEM] –ò–≥—Ä–æ–∫ ${player.name} —Å–æ–±—Ä–∞–ª –º—è—á. –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å=${playerData.inventory}, —Å–æ–±—Ä–∞–Ω–æ=${playerData.count}`);
    }

    // –£–¥–∞–ª—è–µ–º –º—è—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    balls.delete(ballId);
});

// –ö–õ–Æ–ß–ï–í–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –∫–æ–ª–ª–∞–π–¥–µ—Ä
mp.events.add('playerEnterColshape', (player, colshape) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–º –º—è—á–∞
    if (colshape.ballId !== undefined) {
        console.log(`[BALL SYSTEM] –ò–≥—Ä–æ–∫ ${player.name} –≤–æ—à–µ–ª –≤ –∑–æ–Ω—É –º—è—á–∞ ID: ${colshape.ballId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º—è—á
        const ball = mp.objects.at(colshape.ballId);
        if (ball) {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            const distance = Math.sqrt(
                Math.pow(ball.position.x - player.position.x, 2) +
                Math.pow(ball.position.y - player.position.y, 2) +
                Math.pow(ball.position.z - player.position.z, 2)
            );

            console.log(`[BALL SYSTEM] –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º—è—á–∞: ${distance.toFixed(2)}`);

            if (distance < 4.0) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
                player.call('clientCollectBall', [colshape.ballId]);

                // –°–æ–±–∏—Ä–∞–µ–º –º—è—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                mp.events.call('collectBall', player, colshape.ballId);

                // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä
                colshape.destroy();

                console.log(`[BALL SYSTEM] –ú—è—á ${colshape.ballId} —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏–≥—Ä–æ–∫–æ–º ${player.name}`);
            } else {
                console.log(`[BALL SYSTEM] –ò–≥—Ä–æ–∫ ${player.name} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –º—è—á–∞ (${distance.toFixed(2)}m)`);
            }
        } else {
            console.log(`[BALL SYSTEM] –ú—è—á —Å ID ${colshape.ballId} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä`);
            balls.delete(colshape.ballId);
            colshape.destroy();
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–µ–¥–∞–Ω–∏—è –º—è—á–∞
mp.events.add('eatBall', (player) => {
    const playerData = playerBalls.get(player.id);
    if (!playerData || playerData.inventory <= 0) {
        player.outputChatBox('–£ –≤–∞—Å –Ω–µ—Ç –º—è—á–µ–π –¥–ª—è —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è!');
        return;
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—è—á–µ–π
    playerData.inventory--;
    playerBalls.set(player.id, playerData);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç
    player.call('updateInventory', [playerData.inventory, playerData.count]);
    player.call('playEatAnimation');

    player.outputChatBox(`–í—ã —Å—ä–µ–ª–∏ –º—è—á! –û—Å—Ç–∞–ª–æ—Å—å: ${playerData.inventory}`);
    console.log(`[BALL SYSTEM] –ò–≥—Ä–æ–∫ ${player.name} —Å—ä–µ–ª –º—è—á. –û—Å—Ç–∞—Ç–æ–∫: ${playerData.inventory}`);
});

/* ==========================================================
 *  –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í –ò–ó –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê
 * ========================================================== */

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
mp.events.add('processPurchase', (player, productData) => {
    console.log(`[PURCHASE] –ò–≥—Ä–æ–∫ ${player.name} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑:`, productData);

    try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        let product = productData;
        if (typeof productData === 'string') {
            product = JSON.parse(productData);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—è—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        let ballCount = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º—è—á

        // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º—è—á–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        switch (product.category) {
            case '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞':
                ballCount = 3;
                break;
            case '–ú–µ–±–µ–ª—å':
                ballCount = 5;
                break;
            case '–û–¥–µ–∂–¥–∞':
                ballCount = 2;
                break;
            case '–ö–Ω–∏–≥–∏':
                ballCount = 1;
                break;
            case '–°–ø–æ—Ä—Ç':
                ballCount = 4;
                break;
            default:
                ballCount = Math.min(3, Math.max(1, Math.floor(product.price / 50000))); // 1 –º—è—á –∑–∞ –∫–∞–∂–¥—ã–µ 50k —Ä—É–±–ª–µ–π
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ballCount = Math.min(ballCount, ORDER_SPAWN_POSITIONS.length);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ –∑–∞–∫–∞–∑–µ
        player.outputChatBox(`üì¶ –ó–∞–∫–∞–∑ "${product.name}" –ø—Ä–∏–Ω—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!`);
        player.outputChatBox(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${product.price.toLocaleString()} ‚ÇΩ`);
        player.outputChatBox(`üéæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—è—á–µ–π –¥–ª—è —Å–±–æ—Ä–∞: ${ballCount}`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–≤–Ω –º—è—á–µ–π
        mp.events.call('spawnOrderBalls', player, ballCount);

        console.log(`[PURCHASE] –î–ª—è –∏–≥—Ä–æ–∫–∞ ${player.name} –∑–∞–ø—É—â–µ–Ω —Å–ø–∞–≤–Ω ${ballCount} –º—è—á–µ–π –ø–æ –∑–∞–∫–∞–∑—É "${product.name}"`);

    } catch (error) {
        console.error(`[PURCHASE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∏–≥—Ä–æ–∫–∞ ${player.name}:`, error);
        player.outputChatBox('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

/* ==========================================================
 *  –†–ï–°–ü–ê–£–ù –ü–û–°–õ–ï –°–ú–ï–†–¢–ò
 * ========================================================== */
const RESPAWN_POS   = new mp.Vector3(-1069, -3427, 14); // –∫—É–¥–∞ —Å–ø–∞–≤–Ω–∏—Ç—å
const RESPAWN_DELAY = 5000;                             // –º—Å –æ–∂–∏–¥–∞–Ω–∏—è

mp.events.add('playerDeath', (player, reason, killer) => {
    console.log(`[DEATH] –ò–≥—Ä–æ–∫ ${player.name} —É–º–µ—Ä. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    player.outputChatBox('–í—ã —É–º–µ—Ä–ª–∏! –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è...');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏
    player.call('showDeathScreen');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω
    setTimeout(() => {
        console.log(`[RESPAWN] –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑—Ä–æ–¥–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ${player.name}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
        if (!player || !mp.players.exists(player)) {
            console.log('[RESPAWN] –ò–≥—Ä–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ');
            return;
        }

        try {
            const spawnPos = new mp.Vector3(-1069, -3427, 14);

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ –ø–µ—Ä–µ–¥ —Ä–µ—Å–ø–∞–≤–Ω–æ–º
            player.call('hideDeathScreen');

            // –†–µ—Å–ø–∞–≤–Ω–∏–º –∏–≥—Ä–æ–∫–∞
            player.spawn(spawnPos);
            console.log(`[RESPAWN] –ò–≥—Ä–æ–∫ ${player.name} –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏: ${spawnPos.x}, ${spawnPos.y}, ${spawnPos.z}`);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            player.health = 100;
            player.armour = 0;

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            player.call('onPlayerRespawn');
            player.outputChatBox('–í—ã –≤–æ–∑—Ä–æ–∂–¥–µ–Ω—ã!');

        } catch (error) {
            console.error(`[RESPAWN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${player.name}:`, error);
            player.outputChatBox('–û—à–∏–±–∫–∞ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏.');
        }
    }, RESPAWN_DELAY);
});

/* ==========================================================
 *  –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê
 * ========================================================== */

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
mp.events.addCommand('getpos', (player) => {
    const pos = player.position;
    const rot = player.heading;
    console.log(`[DEBUG] –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ ${player.name}: x=${pos.x}, y=${pos.y}, z=${pos.z}, heading=${rot}`);
    player.outputChatBox(`–ü–æ–∑–∏—Ü–∏—è: x=${pos.x.toFixed(2)}, y=${pos.y.toFixed(2)}, z=${pos.z.toFixed(2)}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –º—è—á–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
mp.events.addCommand('spawnball', (player, fullText, x, y, z) => {
    if (!x || !y || !z) {
        player.outputChatBox('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /spawnball [x] [y] [z]');
        return;
    }

    const customPos = [parseFloat(x), parseFloat(y), parseFloat(z)];
    mp.events.call('spawnObjectNearby', player, false, customPos);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
mp.events.addCommand('testorder', (player, fullText, count) => {
    const ballCount = count ? parseInt(count) : 5;
    player.outputChatBox(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –Ω–∞ ${ballCount} –º—è—á–µ–π...`);
    mp.events.call('spawnOrderBalls', player, ballCount);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º—è—á–µ–π
mp.events.addCommand('ballstats', (player) => {
    const playerData = playerBalls.get(player.id);
    if (playerData) {
        player.outputChatBox(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—è—á–µ–π: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å=${playerData.inventory}, –°–æ–±—Ä–∞–Ω–æ=${playerData.count}`);
        console.log(`[BALL SYSTEM] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${player.name}: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å=${playerData.inventory}, —Å–æ–±—Ä–∞–Ω–æ=${playerData.count}`);
    } else {
        player.outputChatBox('–î–∞–Ω–Ω—ã–µ –æ –º—è—á–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º—è—á–µ–π
mp.events.addCommand('resetballs', (player) => {
    playerBalls.set(player.id, {
        inventory: 5,
        count: 0
    });
    player.call('updateInventory', [5, 0]);
    player.outputChatBox('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—è—á–µ–π —Å–±—Ä–æ—à–µ–Ω–∞!');
    console.log(`[BALL SYSTEM] –°–±—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player.name}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤
mp.events.addCommand('debugballs', (player) => {
    player.outputChatBox(`–í—Å–µ–≥–æ –º—è—á–µ–π –≤ –º–∏—Ä–µ: ${balls.size}`);
    console.log(`[BALL SYSTEM] –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è ${player.name}:`);
    console.log(`- –í—Å–µ–≥–æ –º—è—á–µ–π: ${balls.size}`);
    console.log(`- –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:`, playerBalls.get(player.id));

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º—è—á–∞—Ö
    let nearbyBalls = 0;
    balls.forEach((ballInfo, ballId) => {
        const ball = mp.objects.at(ballId);
        if (ball) {
            const distance = Math.sqrt(
                Math.pow(ball.position.x - player.position.x, 2) +
                Math.pow(ball.position.y - player.position.y, 2) +
                Math.pow(ball.position.z - player.position.z, 2)
            );
            if (distance < 10.0) {
                nearbyBalls++;
                console.log(`- –ú—è—á ${ballId} –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distance.toFixed(2)}m`);
            }
        }
    });
    player.outputChatBox(`–ú—è—á–µ–π —Ä—è–¥–æ–º (–≤ —Ä–∞–¥–∏—É—Å–µ 10–º): ${nearbyBalls}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å–ø–∞–≤–Ω–∞
mp.events.addCommand('showpositions', (player) => {
    player.outputChatBox('üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –º—è—á–µ–π:');
    ORDER_SPAWN_POSITIONS.forEach((pos, index) => {
        player.outputChatBox(`${index + 1}. ${pos.name}: (${pos.x}, ${pos.y}, ${pos.z})`);
    });
});

/* ==========================================================
 *  –¢–†–ê–ù–°–ü–û–†–¢ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
 * ========================================================== */

// mp.events.addCommand('veh', async (player, _, argsString) => {
//     // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è —Å–ø–∞–≤–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
// });

// function waitForEntity(entity, timeout = 5000) {
//     // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
// }

// mp.events.add('requestModelsPage', (player, page) => {
//     player.call('showModels', [page]);
// });

console.log('[BALL SYSTEM] –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º—è—á–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
console.log(`[ORDER SYSTEM] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ORDER_SPAWN_POSITIONS.length} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤`);
console.log('[SERVER] –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');